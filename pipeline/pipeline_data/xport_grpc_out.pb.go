// Code generated by protoc-gen-go.
// source: xport_grpc_out.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	xport_grpc_out.proto

It has these top-level messages:
	SubJSONReqMsg
	SubJSONRepMsg
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubJSONReqMsg struct {
	ReqId int64 `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
}

func (m *SubJSONReqMsg) Reset()                    { *m = SubJSONReqMsg{} }
func (m *SubJSONReqMsg) String() string            { return proto.CompactTextString(m) }
func (*SubJSONReqMsg) ProtoMessage()               {}
func (*SubJSONReqMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SubJSONReqMsg) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

type SubJSONRepMsg struct {
	Data  []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	ReqId int64  `protobuf:"varint,2,opt,name=ReqId" json:"ReqId,omitempty"`
}

func (m *SubJSONRepMsg) Reset()                    { *m = SubJSONRepMsg{} }
func (m *SubJSONRepMsg) String() string            { return proto.CompactTextString(m) }
func (*SubJSONRepMsg) ProtoMessage()               {}
func (*SubJSONRepMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SubJSONRepMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SubJSONRepMsg) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func init() {
	proto.RegisterType((*SubJSONReqMsg)(nil), "main.SubJSONReqMsg")
	proto.RegisterType((*SubJSONRepMsg)(nil), "main.SubJSONRepMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GRPCOut service

type GRPCOutClient interface {
	// Server side telemetry streaming
	Pull(ctx context.Context, in *SubJSONReqMsg, opts ...grpc.CallOption) (GRPCOut_PullClient, error)
}

type gRPCOutClient struct {
	cc *grpc.ClientConn
}

func NewGRPCOutClient(cc *grpc.ClientConn) GRPCOutClient {
	return &gRPCOutClient{cc}
}

func (c *gRPCOutClient) Pull(ctx context.Context, in *SubJSONReqMsg, opts ...grpc.CallOption) (GRPCOut_PullClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPCOut_serviceDesc.Streams[0], c.cc, "/main.gRPCOut/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCOutPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCOut_PullClient interface {
	Recv() (*SubJSONRepMsg, error)
	grpc.ClientStream
}

type gRPCOutPullClient struct {
	grpc.ClientStream
}

func (x *gRPCOutPullClient) Recv() (*SubJSONRepMsg, error) {
	m := new(SubJSONRepMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GRPCOut service

type GRPCOutServer interface {
	// Server side telemetry streaming
	Pull(*SubJSONReqMsg, GRPCOut_PullServer) error
}

func RegisterGRPCOutServer(s *grpc.Server, srv GRPCOutServer) {
	s.RegisterService(&_GRPCOut_serviceDesc, srv)
}

func _GRPCOut_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubJSONReqMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCOutServer).Pull(m, &gRPCOutPullServer{stream})
}

type GRPCOut_PullServer interface {
	Send(*SubJSONRepMsg) error
	grpc.ServerStream
}

type gRPCOutPullServer struct {
	grpc.ServerStream
}

func (x *gRPCOutPullServer) Send(m *SubJSONRepMsg) error {
	return x.ServerStream.SendMsg(m)
}

var _GRPCOut_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.gRPCOut",
	HandlerType: (*GRPCOutServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _GRPCOut_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xport_grpc_out.proto",
}

func init() { proto.RegisterFile("xport_grpc_out.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xa9, 0x28, 0xc8, 0x2f,
	0x2a, 0x89, 0x4f, 0x2f, 0x2a, 0x48, 0x8e, 0xcf, 0x2f, 0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0x52, 0xe5, 0xe2, 0x0d, 0x2e, 0x4d, 0xf2, 0x0a, 0xf6,
	0xf7, 0x0b, 0x4a, 0x2d, 0xf4, 0x2d, 0x4e, 0x17, 0x12, 0xe1, 0x62, 0x0d, 0x4a, 0x2d, 0xf4, 0x4c,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0x70, 0x94, 0x2c, 0x91, 0x94, 0x15, 0x80, 0x94,
	0x09, 0x71, 0xb1, 0xb8, 0x24, 0x96, 0x24, 0x82, 0x55, 0xf1, 0x04, 0x81, 0xd9, 0x08, 0xad, 0x4c,
	0x48, 0x5a, 0x8d, 0xec, 0xb9, 0xd8, 0xd3, 0x83, 0x02, 0x9c, 0xfd, 0x4b, 0x4b, 0x84, 0x4c, 0xb8,
	0x58, 0x02, 0x4a, 0x73, 0x72, 0x84, 0x84, 0xf5, 0x40, 0x76, 0xeb, 0xa1, 0x58, 0x2c, 0x85, 0x2e,
	0x08, 0xb2, 0x46, 0x89, 0xc1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x5e, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x77, 0xea, 0x22, 0xc6, 0xc7, 0x00, 0x00, 0x00,
}
